/**
 *  Copyright (C) 2015-2019
 *  Author Alvin Ahmadov <alvin.dev.ahmadov@gmail.com>
 *
 *  This file is part of Dixter Project
 *  License-Identifier: MIT License
 *  See README.md for more information.
 */
#pragma once

#include "Types.hpp"
#include <map>
#include <list>

namespace Dixter
{
	namespace Unicode
	{
		namespace
		{
			const TCodePoint am[] = {
					0x0531, 0x0532, 0x0533, 0x0534, 0x0535, 0x0536, 0x0537, 0x0538,
					0x0539, 0x053A, 0x053B, 0x053C, 0x053D, 0x053E, 0x053F, 0x0540,
					0x0541, 0x0542, 0x0543, 0x0544, 0x0545, 0x0546, 0x0547, 0x0548,
					0x0549, 0x054A, 0x054B, 0x054C, 0x054D, 0x054E, 0x054F, 0x0550,
					0x0551, 0x0552, 0x0553, 0x0554, 0x0587, 0x0555, 0x0556, 0x0561,
					0x0562, 0x0563, 0x0564, 0x0565, 0x0566, 0x0567, 0x0568, 0x0569,
					0x056A, 0x056B, 0x056C, 0x056D, 0x056E, 0x056F, 0x0570, 0x0571,
					0x0572, 0x0573, 0x0574, 0x0575, 0x0576, 0x0577, 0x0578, 0x0579,
					0x057A, 0x057B, 0x057C, 0x057D, 0x057E, 0x057F, 0x0580, 0x0581,
					0x0582, 0x0583, 0x0584, 0x0587, 0x0585, 0x0586, 0
			};
			
			const TCodePoint az[] = {
					0x0041, 0x0042, 0x0043, 0x00C7, 0x0044, 0x0045, 0x018F, 0x0046,
					0x0047, 0x011E, 0x0048, 0x0058, 0x0049, 0x0130, 0x004A, 0x004B,
					0x0051, 0x004C, 0x004D, 0x004E, 0x004F, 0x00D6, 0x0050, 0x0052,
					0x0053, 0x015E, 0x0054, 0x0055, 0x00DC, 0x0056, 0x0059, 0x005A,
					0x0061, 0x0062, 0x0063, 0x00E7, 0x0064, 0x0065, 0x0259, 0x0066,
					0x0067, 0x011F, 0x0068, 0x0078, 0x0131, 0x0069, 0x006A, 0x006B,
					0x0071, 0x006C, 0x006D, 0x006E, 0x006F, 0x00F6, 0x0070, 0x0072,
					0x0073, 0x015F, 0x0074, 0x0075, 0x00FC, 0x0076, 0x0079, 0x007A,
					0
			};
			
			const TCodePoint cu[] = {
					0x12000, 0x12001, 0x12002, 0x12003, 0x12004, 0x12005, 0x12006,
					0x12007, 0x12008, 0x12009, 0x1200A, 0x1200B, 0x1200C, 0x1200D,
					0x1200E, 0x1200F, 0x12010, 0x12011, 0x12012, 0x12013, 0x12014,
					0x12015, 0x12016, 0x12017, 0x12018, 0x12019, 0x1201A, 0x1201B,
					0x1201C, 0x1201D, 0x1201E, 0x1201F, 0x12020, 0x12021, 0x12022,
					0x12023, 0x12024, 0x12025, 0x12026, 0x12027, 0x12028, 0x12029,
					0x1202A, 0x1202B, 0x1202C, 0x1202D, 0x1202E, 0x1202F, 0x12030,
					0x12031, 0x12032, 0x12033, 0x12034, 0x12035, 0x12036, 0x12037,
					0x12038, 0x12039, 0x1203A, 0x1203B, 0x1203C, 0x1203D, 0x1203E,
					0x1203F, 0x12040, 0x12041, 0x12042, 0x12043, 0x12044, 0x12045,
					0x12046, 0x12047, 0x12048, 0x12049, 0x1204A, 0x1204B, 0x1204C,
					0x1204D, 0x1204E, 0x1204F, 0x12050, 0x12051, 0x12052, 0x12053,
					0x12054, 0x12055, 0x12056, 0x12057, 0x12058, 0x12059, 0x1205A,
					0x1205B, 0x1205C, 0x1205D, 0x1205E, 0x1205F, 0x12060, 0x12061,
					0x12062, 0x12063, 0x12064, 0x12065, 0x12066, 0x12067, 0x12068,
					0x12069, 0x1206A, 0x1206B, 0x1206C, 0x1206D, 0x1206E, 0x1206F,
					0x12070, 0x12071, 0x12072, 0x12073, 0x12074, 0x12075, 0x12076,
					0x12077, 0x12078, 0x12079, 0x1207A, 0x1207B, 0x1207C, 0x1207D,
					0x1207E, 0x1207F, 0x12080, 0x12081, 0x12082, 0x12083, 0x12084,
					0x12085, 0x12086, 0x12087, 0x12088, 0x12089, 0x1208A, 0x1208B,
					0x1208C, 0x1208D, 0x1208E, 0x1208F, 0x12090, 0x12091, 0x12092,
					0x12093, 0x12094, 0x12095, 0x12096, 0x12097, 0x12098, 0x12099,
					0x1209A, 0x1209B, 0x1209C, 0x1209D, 0x1209E, 0x1209F, 0x120A0,
					0x120A1, 0x120A2, 0x120A3, 0x120A4, 0x120A5, 0x120A6, 0x120A7,
					0x120A8, 0x120A9, 0x120AA, 0x120AB, 0x120AC, 0x120AD, 0x120AE,
					0x120AF, 0x120B0, 0x120B1, 0x120B2, 0x120B3, 0x120B4, 0x120B5,
					0x120B6, 0x120B7, 0x120B8, 0x120B9, 0x120BA, 0x120BB, 0x120BC,
					0x120BD, 0x120BE, 0x120BF, 0x120C0, 0x120C1, 0x120C2, 0x120C3,
					0x120C4, 0x120C5, 0x120C6, 0x120C7, 0x120C8, 0x120C9, 0x120CA,
					0x120CB, 0x120CC, 0x120CD, 0x120CE, 0x120CF, 0x120D0, 0x120D1,
					0x120D2, 0x120D3, 0x120D4, 0x120D5, 0x120D6, 0x120D7, 0x120D8,
					0x120D9, 0x120DA, 0x120DB, 0x120DC, 0x120DD, 0x120DE, 0x120DF,
					0x120E0, 0x120E1, 0x120E2, 0x120E3, 0x120E4, 0x120E5, 0x120E6,
					0x120E7, 0x120E8, 0x120E9, 0x120EA, 0x120EB, 0x120EC, 0x120ED,
					0x120EE, 0x120EF, 0x120F0, 0x120F1, 0x120F2, 0x120F3, 0x120F4,
					0x120F5, 0x120F6, 0x120F7, 0x120F8, 0x120F9, 0x120FA, 0x120FB,
					0x120FC, 0x120FD, 0x120FE, 0x120FF, 0x12100, 0x12101, 0x12102,
					0x12103, 0x12104, 0x12105, 0x12106, 0x12107, 0x12108, 0x12109,
					0x1210A, 0x1210B, 0x1210C, 0x1210D, 0x1210E, 0x1210F, 0x12110,
					0x12111, 0x12112, 0x12113, 0x12114, 0x12115, 0x12116, 0x12117,
					0x12118, 0x12119, 0x1211A, 0x1211B, 0x1211C, 0x1211D, 0x1211E,
					0x1211F, 0
			};
			
			const TCodePoint da[] = {
					0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
					0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050,
					0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
					0x0059, 0x005A, 0x00c6, 0x00D8, 0x00C5, 0x0061, 0x0062, 0x0063,
					0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B,
					0x006C, 0x006D, 0x006E, 0x006F, 0x0070, 0x0071, 0x0072, 0x0073,
					0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x00E6,
					0x00F8, 0x00E5, 0
			};
			
			const TCodePoint de[] = {
					0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
					0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050,
					0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
					0x0059, 0x005A, 0x00c4, 0x00d6, 0x00DC, 0x1E9E, 0x0061, 0x0062,
					0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A,
					0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070, 0x0071, 0x0072,
					0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A,
					0x00E4, 0x00f6, 0x00FC, 0x00DF, 0
			};
			
			const TCodePoint en[] = {
					0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
					0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050,
					0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
					0x0059, 0x005A, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066,
					0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E,
					0x006F, 0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076,
					0x0077, 0x0078, 0x0079, 0x007A, 0
			};
			
			const TCodePoint fr[] = {
					0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
					0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050,
					0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
					0x0059, 0x005A, 0x00E9, 0x00E0, 0x00E8, 0x00F9, 0x00E2, 0x00EA,
					0x00EE, 0x00F4, 0x00FB, 0x00EB, 0x00EF, 0x00FC, 0x00FF, 0x00E7,
					0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068,
					0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070,
					0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078,
					0x0079, 0x007A, 0x00E9, 0x00E0, 0x00E8, 0x00F9, 0x00E2, 0x00EA,
					0x00EE, 0x00F4, 0x00FB, 0x00EB, 0x00EF, 0x00FC, 0x00FF, 0x00E7,
					0
			};
			
			const TCodePoint ft[] = {
					0x16A0, 0x16A1, 0x16A2, 0x16A3, 0x16A4, 0x16A5, 0x16A6, 0x16A7,
					0x16A8, 0x16A9, 0x16AA, 0x16AB, 0x16AC, 0x16AD, 0x16AE, 0x16AF,
					0x16B0, 0x16B1, 0x16B2, 0x16B3, 0x16B4, 0x16B5, 0x16B6, 0x16B7,
					0x16B8, 0x16B9, 0x16BA, 0x16BB, 0x16BC, 0x16BD, 0x16BE, 0x16BF,
					0x16C0, 0x16C1, 0x16C2, 0x16C3, 0x16C4, 0x16C5, 0x16C6, 0x16C7,
					0x16C8, 0x16C9, 0x16CA, 0x16CB, 0x16CC, 0x16CD, 0x16CE, 0x16CF,
					0x16D0, 0x16D1, 0x16D2, 0x16D3, 0x16D4, 0x16D5, 0x16D6, 0x16D7,
					0x16D8, 0x16D9, 0x16DA, 0x16DB, 0x16DC, 0x16DD, 0x16DE, 0x16DF,
					0x16E0, 0x16E1, 0x16E2, 0x16E3, 0x16E4, 0x16E5, 0x16E6, 0x16E7,
					0x16E8, 0x16E9, 0x16EA, 0
			};
			
			const TCodePoint jp[] = {
					0x30A1, 0x30A2, 0x30A3, 0x30A4, 0x30A5, 0x30A6, 0x30A7, 0x30A8,
					0x30A9, 0x30AA, 0x30AB, 0x30AC, 0x30AD, 0x30AE, 0x30AF, 0x30B0,
					0x30B1, 0x30B2, 0x30B3, 0x30B4, 0x30B5, 0x30B6, 0x30B7, 0x30B8,
					0x30B9, 0x30BA, 0x30BB, 0x30BC, 0x30BD, 0x30BE, 0x30BF, 0x30C0,
					0x30C1, 0x30C2, 0x30C3, 0x30C4, 0x30C5, 0x30C6, 0x30C7, 0x30C8,
					0x30C9, 0x30CA, 0x30CB, 0x30CC, 0x30CD, 0x30CE, 0x30CF, 0x30D0,
					0x30D1, 0x30D2, 0x30D3, 0x30D4, 0x30D5, 0x30D6, 0x30D7, 0x30D8,
					0x30D9, 0x30DA, 0x30DB, 0x30DC, 0x30DD, 0x30DE, 0x30DF, 0x30E0,
					0x30E1, 0x30E2, 0x30E3, 0x30E4, 0x30E5, 0x30E6, 0x30E7, 0x30E8,
					0x30E9, 0x30EA, 0x30EB, 0x30EC, 0x30ED, 0x30EE, 0x30EF, 0x30F0,
					0x30F1, 0x30F2, 0x30F3, 0x30F4, 0x30F5, 0x30F6, 0x30F7, 0x30F8,
					0x30F9, 0x30FA, 0x30FB, 0x30FC, 0x30FD, 0x30FE, 0x30FF, 0
			};
			
			const TCodePoint is[] = {
					0x0041, 0x00C1, 0x0042, 0x0044, 0x00D0, 0x0045, 0x00C9, 0x0046,
					0x0047, 0x0048, 0x0049, 0x00CD, 0x004A, 0x004B, 0x004C, 0x004D,
					0x004E, 0x004F, 0x00D3, 0x0050, 0x0052, 0x0053, 0x0054, 0x0055,
					0x00DA, 0x0056, 0x0058, 0x0059, 0x00DD, 0x00DE, 0x00C6, 0x00D6,
					0x0061, 0x00E1, 0x0062, 0x0064, 0x00F0, 0x0065, 0x00E9, 0x0066,
					0x0067, 0x0068, 0x0069, 0x00ED, 0x006A, 0x006B, 0x006C, 0x006D,
					0x006E, 0x006F, 0x00F3, 0x0070, 0x0072, 0x0073, 0x0074, 0x0075,
					0x00FA, 0x0076, 0x0078, 0x0079, 0x00FD, 0x00FE, 0x00E6, 0
			};
			
			const TCodePoint ru[] = {
					0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0401, 0x0416,
					0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
					0x041F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426,
					0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E,
					0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0451,
					0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D,
					0x043E, 0x043F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445,
					0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D,
					0x044E, 0x044F, 0
			};
			
			const TCodePoint no[] = {
					0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
					0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050,
					0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
					0x0059, 0x005A, 0x00C6, 0x00D8, 0x00C5, 0x0061, 0x0062, 0x0063,
					0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B,
					0x006C, 0x006D, 0x006E, 0x006F, 0x0070, 0x0071, 0x0072, 0x0073,
					0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x00E6,
					0x00F8, 0x00E5, 0
			};
			
			const TCodePoint sv[] = {
					0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
					0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 0x0050,
					0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
					0x0059, 0x005A, 0x00C5, 0x00D6, 0x00C4, 0x0061, 0x0062, 0x0063,
					0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B,
					0x006C, 0x006D, 0x006E, 0x006F, 0x0070, 0x0071, 0x0072, 0x0073,
					0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x00E5,
					0x00F6, 0x00E4, 0
			};
			const TCodePoint tr[] = {
					0x0041, 0x0042, 0x0043, 0x00C7, 0x0044, 0x0045, 0x0046, 0x0047,
					0x011E, 0x0048, 0x0058, 0x0049, 0x0130, 0x004A, 0x004B, 0x0051,
					0x004C, 0x004D, 0x004E, 0x004F, 0x00D6, 0x0050, 0x0052, 0x0053,
					0x015E, 0x0054, 0x0055, 0x00DC, 0x0056, 0x0059, 0x005A, 0x0061,
					0x0062, 0x0063, 0x00E7, 0x0064, 0x0065, 0x0066, 0x0067, 0x011F,
					0x0068, 0x0078, 0x0131, 0x0069, 0x006A, 0x006B, 0x0071, 0x006C,
					0x006D, 0x006E, 0x006F, 0x00F6, 0x0070, 0x0072, 0x0073, 0x015F,
					0x0074, 0x0075, 0x00FC, 0x0076, 0x0079, 0x007A, 0
			};
		} // anonymous namespace
		
		using TCodePointMap = std::map<TString, const TCodePoint*>;
		
		const static TCodePointMap langdefs {
				{"am", am}, {"az", az}, {"cu", cu}, {"da", da},
				{"de", de}, {"en", en}, {"fr", fr}, {"ft", ft},
				{"is", is}, {"jp", jp}, {"ru", ru}, {"no", no},
				{"sv", sv}, {"tr", tr}
		};
	} // namespace Unicode
} // namespace Dixter
